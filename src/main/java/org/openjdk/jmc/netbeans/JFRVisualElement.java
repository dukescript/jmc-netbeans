/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.openjdk.jmc.netbeans;

import java.awt.BorderLayout;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import net.java.html.js.JavaScriptBody;
import net.java.html.json.Model;
import org.netbeans.api.htmlui.HTMLComponent;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.UndoRedo;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.RequestProcessor;


public final class JFRVisualElement extends JPanel implements MultiViewElement {

    private JFRDataObject obj;
    private JToolBar toolbar = new JToolBar();
    private transient MultiViewElementCallback callback;
    
    private static RequestProcessor PROC = new RequestProcessor(JFRVisualElement.class);
    
   
    public JFRVisualElement(Lookup lkp) {
        obj = lkp.lookup(JFRDataObject.class);
        setName(obj.getNodeDelegate().getDisplayName());
        assert obj != null;
        initComponents();
        final Report content =new Report();
        this.add(Page.getPage(content), BorderLayout.CENTER);

        final Future<String> reportFuture = PROC.submit(() -> {
            return obj.getHTMLReport();
        });
        PROC.post(() -> {
            try {
                String report = reportFuture.get();
                content.setReport(report);
            } catch (InterruptedException | ExecutionException ex) {
                Exceptions.printStackTrace(ex);
            }
        });
    }

    @Override
    public String getName() {
        return "JFRVisualElement";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public JComponent getVisualRepresentation() {
        return this;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        return toolbar;
    }

    @Override
    public Action[] getActions() {
        return new Action[0];
    }

    @Override
    public Lookup getLookup() {
        return obj.getLookup();
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    @Override
    public void componentShowing() {
    }

    @Override
    public void componentHidden() {
    }

    @Override
    public void componentActivated() {
    }

    @Override
    public void componentDeactivated() {
    }

    @Override
    public UndoRedo getUndoRedo() {
        return UndoRedo.NONE;
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
        this.callback = callback;
    }

    @Override
    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }
    
    @HTMLComponent(className = "Page", type = JComponent.class ,url = "JFRViewer.html")
    public static void getPage(Report c){
         c.applyBindings();       
    }
    


}
